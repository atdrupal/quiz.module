<?php

use Drupal\quiz_question\QuizQuestion;
use Drupal\quiz_question\QuizQuestionResponse;

/**
 * Quiz Question module.
 * This module provides the basic facilities for adding quiz question types to a quiz.
 * @file
 */
/*
 * The system remembers what quizzes a user has been involved in lately. This constant determines
 * how many quizzes the system will remember for each user
 */
define('QUIZ_QUESTION_NUM_LATEST', 10);

/**
 * Include hook implementations.
 */
require_once dirname(__FILE__) . '/quiz_question.hooks.inc';

/**
 * Figure out if a user has access to score a certain result
 *
 * @param $vid
 *  Question version id
 * @param $result_id
 *  Result id
 * @return
 *  True if the user has access to score the result
 */
function quiz_question_access_to_score($vid, $result_id) {
  global $user;
  $sql = 'SELECT * FROM {quiz_results_answers} WHERE result_id = :result_id AND question_vid = :question_vid';
  $answer = db_query($sql, array(':result_id' => $result_id, ':question_vid' => $vid))->fetch();
  if (!$answer) {
    return FALSE;
  }
  if (user_access('score any quiz')) {
    return TRUE;
  }
  if (user_access('score taken quiz answer')) {
    $uid = db_query('SELECT uid from {quiz_results} qnr WHERE qnr.result_id = :result_id', array(':result_id' => $result_id))->fetchField();
    if ($uid == $user->uid) {
      return TRUE;
    }
  }
  if (user_access('score own quiz')) {
    return db_query('SELECT r.uid FROM {node_revision} r
            JOIN {quiz_results} qnr ON (r.nid = qnr.nid)
            WHERE qnr.result_id = :result_id
            ', array(':result_id' => $result_id))->fetchField() == $user->uid;
  }
}

/**
 * Form for teaser display
 *
 * @param $node
 *  The question node
 * @return
 *  Content array
 */
function _quiz_question_teaser_content($node) {
  $content['question_type'] = array(
      '#markup' => '<div class="question_type_name">' . node_type_get_type($node)->name . '</div>',
      '#weight' => -100,
  );
  return $content;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function quiz_question_has_been_answered($node) {
  if ($question_instance = _quiz_question_get_instance($node, true)) {
    return $question_instance->hasBeenAnswered();
  }
}

/**
 * Get the configuration form for all enabled question types.
 */
function quiz_question_config($form, $context) {
  $q_types = _quiz_question_get_implementations();
  $form = array();
  $form['#validate'] = array();
  // Go through all question types and merge their config forms
  foreach ($q_types as $type => $values) {
    $function = $type . '_quiz_question_config';
    if ($admin_form = $function()) {
      $form[$type] = $admin_form;
      $form[$type]['#type'] = 'fieldset';
      $form[$type]['#title'] = $values['name'];
      $form[$type]['#collapsible'] = TRUE;
      $form[$type]['#collapsed'] = TRUE;
      if (isset($admin_form['#validate']) && is_array($admin_form['#validate'])) {
        $form['#validate'] = array_merge($form['#validate'], $admin_form['#validate']);
        unset($form[$type]['#validate']);
      }
    }
  }
  return system_settings_form($form);
}

/**
 * Get an instance of a quiz question.
 *
 * Get information about the class and use it to construct a new
 * object of the appropriate type.
 *
 * @param $node
 *  Question node
 * @param $use_cached
 *  Can we use a cached version of the node?
 * @return
 *  The appropriate QuizQuestion extension instance
 */
function _quiz_question_get_instance(&$node, $use_cached = FALSE) {
  // We use static caching to improve performance
  static $question_instances = array();

  $vid = is_object($node) ? (isset($node->vid) ? $node->vid : 0) : $node['vid'];
  if ($use_cached && isset($question_instances[$vid])) {
    return $question_instances[$vid];
  }

  $using_dummy_node = FALSE;
  if (is_object($node)) {
    // If $node don't have a type it is a dummy node
    if (!isset($node->type)) {
      // To substanitally improve performance(especially on the result page) we avoid node_load()...
      // @todo why is this? consider getting rid of this as nodes are better
      // cached/retrieved in d7. adding the UID here to get rid of a notice.
      $sql = 'SELECT n.type, r.nid, r.vid, r.title, p.max_score, n.uid
              FROM {node_revision} r
              JOIN {node} n ON r.nid = n.nid
              JOIN {quiz_question_properties} p ON r.vid = p.vid
              WHERE r.vid = :vid';
      $node = db_query($sql, array(':vid' => $node->vid))->fetch();
      $using_dummy_node = TRUE;
    }
    $name = $node->type;
  }
  elseif (is_array($node)) {
    $name = $node['type'];
  }

  // No cached instance of QuizQuestion has been returned. We construct a new instance
  $info = _quiz_question_get_implementations();
  $constructor = $info[$name]['question provider'];
  if (empty($constructor)) {
    return FALSE;
  }

  // We create a new instance of QuizQuestion
  $to_return = new $constructor($node);
  if (!($to_return instanceof QuizQuestion)) {
    // Make sure the constructor is creating an extension of QuizQuestion
    drupal_set_message(t('The question-type %name isn\'t a QuizQuestion. It needs to extend the QuizQuestion class.', array('%name' => $name)), 'error', FALSE);
  }

  // If we're using a dummy node we have to run getNodeProperties, and populate the node with those properties
  if ($using_dummy_node) {
    $props = $to_return->getNodeProperties();
    foreach ($props as $key => $value) {
      $to_return->node->{$key} = $value;
    }
  }

  // Cache the node
  $question_instances[$vid] = $to_return;

  return $to_return;
}

/**
 * Get an instance of a quiz question responce.
 *
 * Get information about the class and use it to construct a new
 * object of the appropriate type.
 *
 * @param $result_id
 *  Result id
 * @param $question
 *  The question node(not a QuizQuestion instance)
 * @param $answer
 *  Resonce to the answering form.
 * @param $nid
 *  Question node id
 * @param $vid
 *  Question node version id
 * @return
 *  The appropriate QuizQuestionResponce extension instance
 */
function _quiz_question_response_get_instance($result_id, $question, $answer = NULL, $nid = NULL, $vid = NULL) {
  // We cache responses to improve performance
  static $quiz_responses = array();
  if (is_object($question) && isset($quiz_responses[$result_id][$question->vid])) {
    // We refresh the question node in case it has been changed since we cached the response
    $quiz_responses[$result_id][$question->vid]->refreshQuestionNode($question);
    if ($quiz_responses[$result_id][$question->vid]->is_skipped !== FALSE) {
      return $quiz_responses[$result_id][$question->vid];
    }
  }
  elseif (isset($quiz_responses[$result_id][$vid])) {
    if ($quiz_responses[$result_id][$vid]->is_skipped !== FALSE) {
      return $quiz_responses[$result_id][$vid];
    }
  }
  if (!isset($quiz_responses[$result_id])) {
    // Prepare to cache responses for this result id
    $quiz_responses[$result_id] = array();
  }
  // If the question node isn't set we fetch it from the QuizQuestion instance this responce belongs to
  if (!isset($question)) {
    $question_node = node_load($nid, $vid);
    $question = _quiz_question_get_instance($question_node, TRUE)->node;
  }
  if (!$question) {
    return FALSE;
  }
  $info = _quiz_question_get_implementations();
  $constructor = $info[$question->type]['response provider'];
  $to_return = new $constructor($result_id, $question, $answer);
  // All responce classes must extend QuizQuestionResponse
  if (!($to_return instanceof QuizQuestionResponse)) {
    drupal_set_message(t('The question-response isn\'t a QuizQuestionResponse. It needs to extend the QuizQuestionResponse interface, or extend the abstractQuizQuestionResponse class.'), 'error', FALSE);
  }
  // Cache the responce instance
  $quiz_responses[$result_id][$question->vid] = $to_return;

  return $to_return;
}

/**
 * Get the information about various implementations of quiz questions.
 *
 * @param $reset
 *  If this is true, the cache will be reset.
 * @return
 *  An array of information about quiz question implementations.
 * @see quiz_question_quiz_question_info() for an example of a quiz question info hook.
 */
function _quiz_question_get_implementations($name = NULL, $reset = FALSE) {
  static $info = array();
  if (empty($info) || $reset) {
    $qtypes = module_invoke_all('quiz_question_info');
    foreach ($qtypes as $type => $definition) {
      // We only want the ones with classes.
      if (!empty($definition['question provider'])) {
        // Cache the info
        $info[$type] = $definition;
      }
    }
    drupal_alter('quiz_question_info', $info);
  }
  return $info;
}

/**
 * Refreshes the quiz_question_latest_quizzes table when a user has modified a new quiz.
 *
 * The latest quizzes table is used to know what quizzes the user has been using lately.
 *
 * @param $nid
 *   nid of the last quiz the current user modified
 */
function quiz_question_refresh_latest_quizzes($nid) {
  global $user;

  // Delete entry if it allready exists
  db_delete('quiz_question_latest_quizzes')
    ->condition('uid', $user->uid)
    ->condition('quiz_nid', $nid)
    ->execute();

  // Inserts as new entry to get new id. Latest quizzes are ordered by id(descending)
  $id = db_insert('quiz_question_latest_quizzes')
    ->fields(array(
        'uid'      => $user->uid,
        'quiz_nid' => $nid,
    ))
    ->execute();

  // If we have to many entries for current user, delete the oldest entries...
  $min_id = db_select('quiz_question_latest_quizzes', 'lq')
    ->fields('lq', array('id'))
    ->condition('uid', $user->uid)
    ->orderBy('id', 'DESC')
    ->range(QUIZ_QUESTION_NUM_LATEST - 1, 1)
    ->execute()
    ->fetchField();

  // Delete all table entries older than the nth row, if nth row was found.
  if ($min_id) {
    db_delete('quiz_question_latest_quizzes')
      ->condition('id', $min_id, '<')
      ->condition('uid', $user->uid)
      ->execute();
  }
}

/**
 * Removes a quiz from the quiz_question_latest_quizzes table.
 *
 * @param $nid
 *   the nid of a quiz that shall be removed
 */
function quiz_question_remove_latest_quizzes($nid) {
  db_delete('quiz_question_latest_quizzes')
    ->condition('quiz_nid', $nid)
    ->execute();
}

/**
 * Get the max score for a question
 *
 * @param $nid
 *  Question node id
 * @param $vid
 *  Question node version id
 * @return
 *  Max score(int)
 */
function quiz_question_get_max_score($nid, $vid) {
  return db_query('SELECT max_score
          FROM {quiz_question_properties}
          WHERE nid = :nid AND vid = :vid', array(':nid' => $nid, ':vid' => $vid))->fetchField();
}

/**
 * Returns a result report for a question response.
 *
 * The retaurned value is a form array because in some contexts the scores in the form
 * is editable
 *
 * @param $question
 *  The question node
 * @return
 *  FAPI form array
 */
function quiz_question_report_form($question) {
  $answer = $question->answers[0];
  $response_instance = _quiz_question_response_get_instance($answer['result_id'], $question, $answer);
  // If need to specify the score weight if it isn't already specified.
  if (!isset($response_instance->question->score_weight)) {
    $vid = db_query('SELECT quiz_vid FROM {quiz_results} WHERE result_id = :rid', array(
        ':rid' => $answer['result_id']
      ))->fetchField();

    $qnr_max_score = db_query('SELECT qnr.max_score FROM {quiz_relationship} qnr
      WHERE qnr.question_vid = :question_vid AND qnr.quiz_vid = :quiz_vid', array(':question_vid' => $question->vid, ':quiz_vid' => $vid))
      ->fetchField();

    if ($qnr_max_score === FALSE) {
      $qnr_max_score = db_query('SELECT qt.max_score FROM {quiz_results} qnr
         JOIN {quiz_results_answers} qnra ON (qnr.result_id = qnra.result_id)
         JOIN {quiz_terms} qt ON (qt.vid = qnr.quiz_vid AND qt.tid = qnra.tid)
         WHERE qnr.result_id = :rid AND qnra.question_nid = :qnid AND qnra.question_vid = :qvid', array(':rid' => $answer['result_id'], ':qnid' => $question->nid, ':qvid' => $question->vid))
        ->fetchField();
    }

    $response_instance->question->score_weight = ($qnr_max_score == 0 || $response_instance->question->max_score == 0) ? 0 : ($qnr_max_score / $response_instance->question->max_score);
  }

  return $response_instance->getReportForm();
}

/**
 * Add body field to quiz_question nodes.
 */
function quiz_question_add_body_field($type) {
  node_types_rebuild();
  $node_type = node_type_get_type($type);
  if (!$node_type) {
    watchdog('quiz', 'Attempt to add body field was failed as question content type %type is not defined.', array('%type' => $type), WATCHDOG_ERROR);
    watchdog('quiz', '<pre>' . print_r(node_type_get_types(), 1), array(), WATCHDOG_ERROR);
    return;
  }
  node_add_body_field($node_type, 'Question');
  // Override default weight to make body field appear first
  $instance = field_read_instance('node', 'body', $type);
  $instance['widget']['weight'] = -10;
  $instance['widget']['settings']['rows'] = 6;

  // Make the question body visible by default for the question view mode
  $instance['display']['question'] = array(
      'label'    => 'hidden',
      'type'     => 'text_default',
      'weight'   => 1,
      'settings' => array(),
      'module'   => 'text',
  );

  field_update_instance($instance);
}

/**
 * Theme the feedback for any question type.
 */
function theme_quiz_question_feedback($variables) {
  $rows = $variables['data'];
  $headers = array_intersect_key($variables['labels'], $rows[0]);
  return theme('table', array('header' => $headers, 'rows' => $rows));
}

/**
 * Helper function to faciliate icon display, like "correct" or "selected".
 */
function quiz_icon($icon) {
  return theme('quiz_answer_result', array('type' => $icon));
}
