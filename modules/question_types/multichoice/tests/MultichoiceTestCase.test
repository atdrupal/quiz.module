<?php

/**
 * Test class for multichoice questions.
 */
class MultichoiceTestCase extends QuizQuestionTestCase {

  var $question_node_type = 'multichoice';

  public static function getInfo() {
    return array(
        'name'        => t('Multichoice'),
        'description' => t('Unit test for the multichoice question type.'),
        'group'       => t('Quiz'),
    );
  }

  public function setUp($modules = array(), $admin_permissions = array(), $user_permissions = array()) {
    $modules[] = 'multichoice';
    parent::setUp($modules, $admin_permissions, $user_permissions);
  }

  /**
   * Create a default MCQ with default settings.
   */
  public function testCreateQuizQuestion($settings = array()) {
    $settings += array(
        'title'          => 'MCQ 1 Title',
        'type'           => 'multichoice',
        'choice_multi'   => 0,
        'choice_random'  => 0,
        'choice_boolean' => 0,
        'body'           => array(LANGUAGE_NONE => array(array('value' => 'MCQ 1 body text'))),
    );

    // Set up some alternatives.
    $settings['alternatives'][0]['answer']['value'] = 'A';
    $settings['alternatives'][0]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][0]['feedback_if_chosen']['value'] = 'You chose A';
    $settings['alternatives'][0]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][0]['feedback_if_not_chosen']['value'] = 'You did not choose A';
    $settings['alternatives'][0]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][0]['score_if_chosen'] = 1;
    $settings['alternatives'][0]['score_if_not_chosen'] = 0;

    $settings['alternatives'][1]['answer']['value'] = 'B';
    $settings['alternatives'][1]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][1]['feedback_if_chosen']['value'] = 'You chose B';
    $settings['alternatives'][1]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][1]['feedback_if_not_chosen']['value'] = 'You did not choose B';
    $settings['alternatives'][1]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][1]['score_if_chosen'] = 0;
    $settings['alternatives'][1]['score_if_not_chosen'] = 0;

    $settings['alternatives'][2]['answer']['value'] = 'C';
    $settings['alternatives'][2]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][2]['feedback_if_chosen']['value'] = 'You chose C';
    $settings['alternatives'][2]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][2]['feedback_if_not_chosen']['value'] = 'You did not choose C';
    $settings['alternatives'][2]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][2]['score_if_chosen'] = 0;
    $settings['alternatives'][2]['score_if_not_chosen'] = 0;

    $question = $this->drupalCreateNode($settings);
    $question = node_load($question->nid);

    $this->assertNotNull($question->alternatives[0]['id'], 'Alternative A was created as part of question save.');
    $this->assertNotNull($question->alternatives[1]['id'], 'Alternative B was created as part of question save.');
    $this->assertNotNull($question->alternatives[2]['id'], 'Alternative C was created as part of question save.');

    $this->assertEqual($question->alternatives[0]['answer']['value'], 'A', 'Alternative text A was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[1]['answer']['value'], 'B', 'Alternative text B was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[2]['answer']['value'], 'C', 'Alternative text C was saved and loaded correctly.');

    $this->assertEqual($question->alternatives[0]['answer']['format'], 'filtered_html', 'Alternative format A was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[1]['answer']['format'], 'filtered_html', 'Alternative format B was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[1]['answer']['format'], 'filtered_html', 'Alternative format C was saved and loaded correctly.');

    return $question;
  }

  public function testQuestionFeedback() {
    $question = $this->testCreateQuizQuestion();
    $quiz = $this->linkQuestionToQuiz($question);

    // Login as non-admin.
    $this->drupalLogin($this->user);

    // Test incorrect question. Feedback, answer.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[$question->nid][user_answer]" => $question->alternatives[1]['id'],
      ), t('Finish'));
    $this->assertPattern('/quiz-score-icon selected/', 'Found selected answer.');
    $this->assertPattern('/quiz-score-icon should/', 'Found should answer.');
    $this->assertPattern('/quiz-score-icon incorrect/', 'Found incorrect answer.');
    $this->assertText('You did not choose A');
    $this->assertText('You chose B');
    $this->assertText('You did not choose C');
  }

  /**
   * Test multiple answers.
   */
  function testMultipleAnswers() {
    $question = $this->testCreateQuizQuestion(array('choice_multi' => 1));
    $quiz = $this->linkQuestionToQuiz($question);

    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[$question->nid][user_answer][1]" => 1,
        "question[$question->nid][user_answer][3]" => 3,
      ), t('Finish'));
    // 0 of 1, because user picked a correct answer and an incorrect answer.
    $this->assertText('You got 0 of 1 possible points.');
    $this->assertText('Your score: 0%');

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->nid][user_answer][1]" => 1), t('Finish'));
    // 1 of 1, because user picked a correct answer and not an incorrect answer.
    $this->assertText('You got 1 of 1 possible points.');
    $this->assertText('Your score: 100%');
  }

  /**
   * Test random order of choices.
   * @todo I don't know how we would test random questions.
   */
  function testRandomOrder() {
    $question = $this->testCreateQuizQuestion(array('choice_random' => 1));
    $quiz = $this->linkQuestionToQuiz($question);

    $this->drupalLogin($this->user);

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[$question->nid][user_answer]" => $question->alternatives[0]['id'],
      ), t('Finish'));
  }

  /**
   * Test simple scoring.
   */
  function testSimpleScoring() {
    $settings = array();
    $settings['alternatives'][1]['score_if_chosen'] = 0;
    $settings['alternatives'][1]['score_if_not_chosen'] = 0;
    $settings['choice_multi'] = 1;
    $settings['choice_boolean'] = 1;

    $question = $this->testCreateQuizQuestion($settings);
    $quiz = $this->linkQuestionToQuiz($question);

    $this->drupalLogin($this->user);

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[$question->nid][user_answer][1]" => 1,
        "question[$question->nid][user_answer][3]" => 3,
      ), t('Finish'));
    $this->assertText('You got 0 of 1 possible points.');
    $this->assertText('Your score: 0%');

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->nid][user_answer][1]" => 1), t('Finish'));
    $this->assertText('You got 1 of 1 possible points.');
    $this->assertText('Your score: 100%');
  }

}
