<?php

use Drupal\quiz\Entity\QuizEntity;
use Drupal\quiz\Entity\QuizEntityType;

/**
 * Test aspects of quiz creation including global and user defaults.
 */
class QuizEntityTest extends QuizTestCase {

  public static function getInfo() {
    return array(
      'name'        => t('Quiz entity'),
      'description' => t('Unit test for Quiz entity.'),
      'group'       => t('Quiz'),
    );
  }

  function setUp($modules = array(), $admin_permissions = array(), $user_permissions = array()) {
    $modules[] = 'quiz';
    parent::setUp($modules);
  }

  public function testInitQuizEntityType() {
    $type = entity_create('quiz_type', array());
    $this->assertTrue($type instanceof QuizEntityType, 'Quiz type entity is created correctly using entity_create().');

    // Default quiz type.
    $types = entity_load('quiz_type', array('quiz'));
    $quiz_type = reset($types);
    $this->assertTrue($quiz_type instanceof QuizEntityType, 'Default quiz type is created.');
  }

  public function testQuizEntity() {
    // ---------------------
    // Create entity
    // ---------------------
    $quiz = entity_create('quiz_entity', array('type' => 'quiz'));
    $this->assertTrue($quiz instanceof QuizEntity, 'Quiz entity is created correctly using entity_create().');

    // ---------------------
    // Create entity
    // ---------------------
    $quiz->changed = $quiz->created = time();
    $quiz->title = 'Demo quiz';
    $quiz->uid = 1;
    entity_save('quiz_entity', $quiz);
    $this->assertNotNull($quiz, 'Quiz entity is created successully.');

    // ---------------------
    // Update entity
    // ---------------------
    $quiz->title = 'Updated demo quiz';
    entity_save('quiz_entity', $quiz);

    // Reload entity
    $quiz = entity_load_single('quiz_entity', $quiz->identifier());
    $this->assertEqual('Updated demo quiz', $quiz->title, 'Quiz entity is updated.');

    // ---------------------
    // Test revision supporting
    // ---------------------
    $old_revision_id = $quiz->vid;

    // Save new revision
    $quiz->title .= ' [new revision]';
    $quiz->is_new_revision = true;
    $quiz->log = 'Trying revision supporting';
    entity_save('quiz_entity', $quiz);

    // Load old revision
    $quiz_1 = entity_load('quiz_entity', array($quiz->qid), array('vid' => $old_revision_id));
    $quiz_1 = reset($quiz_1);
    $quiz_2 = entity_load('quiz_entity', array($quiz->qid));
    $quiz_2 = reset($quiz_2);
    $this->assertNotEqual($quiz_1->log, $quiz_2->log, 'New revision is created correctly.');

    // ---------------------
    // Delete quiz entity
    // ---------------------
    entity_delete('quiz_entity', $quiz->identifier());
    $null_quiz = entity_load_single('quiz_entity', $quiz->identifier());
    $this->assertFalse($null_quiz, 'Quiz entity is deleted');
  }

}
