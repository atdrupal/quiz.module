<?php

/**
 * @file
 * Quiz install schema for installing the quiz module
 */

/**
 * Implements hook_install().
 */
function quiz_install() {
  // Create default quiz type. In case the module is installed via an
  // installation profile, skip that.
  if (!drupal_installation_attempted()) {
    entity_create('quiz_type', array('type' => 'quiz', 'label' => t('Quiz'), 'weight' => 0))
      ->save();
  }

  drupal_set_message(t('Quiz module has been enabled. To !create_a_quiz go to Create Content -> Quiz.', array(
      '!create_a_quiz' => l(t('create a quiz'), 'quiz/add')
  )));
}

/**
 * Implements hook_schema().
 */
function quiz_schema() {
  $schema = array();

  $schema['quiz_type'] = array(
      'description' => 'Stores information about all defined quiz types.',
      'fields'      => array(
          'id'          => array('type' => 'serial', 'not null' => TRUE, 'description' => 'Primary Key: Unique quiz type ID.'),
          'type'        => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'description' => 'The machine-readable name of this quiz type.'),
          'label'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'The human-readable name of this quiz type.'),
          'weight'      => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'tiny', 'description' => 'The weight of this quiz type in relation to others.'),
          'data'        => array('type' => 'text', 'not null' => FALSE, 'size' => 'big', 'serialize' => TRUE, 'description' => 'A serialized array of additional data related to this quiz type.'),
          'status'      => array('type' => 'int', 'not null' => TRUE, 'default' => 0x01, 'size' => 'tiny', 'description' => 'The exportable status of the entity.'),
          'module'      => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The name of the providing module if the entity has been defined in code.'),
          'description' => array('type' => 'text', 'not null' => FALSE, 'size' => 'medium', 'translatable' => TRUE, 'description' => 'A brief description of this quiz type.'),
          'help'        => array('type' => 'text', 'not null' => FALSE, 'size' => 'medium', 'translatable' => TRUE, 'description' => 'Help information shown to the user when creating a quiz entity of this type.'),
      ),
      'primary key' => array('id'),
      'unique keys' => array('type' => array('type')),
  );

  $schema['quiz_entity'] = array(
      'description' => 'Store quiz items',
      'fields'      => array(
          'qid'     => array('type' => 'serial', 'not null' => TRUE, 'description' => 'Primary Key: Unique quiz item ID.'),
          'vid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'type'    => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => '', 'description' => 'The {quiz_type}.type of this quiz.'),
          'title'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'The title of this quiz, always treated as non-markup plain text.'),
          'created' => array('type' => 'int', 'not null' => FALSE, 'description' => 'The Unix timestamp when the quiz was created.'),
          'changed' => array('type' => 'int', 'not null' => FALSE, 'description' => 'The Unix timestamp when the quiz was most recently saved.'),
          'uid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('qid'),
  );

  $schema['quiz_entity_revision'] = array(
      'description' => 'Entity revision table for quiz content with fields.',
      'fields'      => array(
          'qid'                        => array('type' => 'int', 'not null' => TRUE, 'description' => 'The id this revision belongs to'),
          'vid'                        => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The primary identifier for this version.'),
          'revision_uid'               => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Author of quiz revision.'),
          'log'                        => array('type' => 'text', 'size' => 'big', 'description' => t('A log message associated with the revision.')),
          'changed'                    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The Unix timestamp when the quiz was most recently saved.'),
          'aid'                        => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
          'number_of_random_questions' => array('type' => 'int', 'size' => 'small', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'max_score_for_random'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1),
          'pass_rate'                  => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE),
          'summary_pass'               => array('type' => 'text'),
          'summary_pass_format'        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE,),
          'summary_default'            => array('type' => 'text',),
          'summary_default_format'     => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE,),
          'randomization'              => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'backwards_navigation'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1),
          'keep_results'               => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => QUIZ_KEEP_ALL,),
          'repeat_until_correct'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'quiz_open'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'quiz_close'                 => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'takes'                      => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'show_attempt_stats'         => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 1),
          'time_limit'                 => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'quiz_always'                => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
          'tid'                        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
          'has_userpoints'             => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'userpoints_tid'             => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'time_left'                  => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'max_score'                  => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
          'allow_skipping'             => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'allow_resume'               => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 1),
          'allow_jumping'              => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0),
          'allow_change'               => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 1),
          'show_passed'                => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 1),
          'mark_doubtful'              => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
          'review_options'             => array('type' => 'text', 'serialize' => TRUE),
      ),
      'primary key' => array('vid'),
      'indexes'     => array('fpid' => array('qid', 'vid')),
  );

  $schema['quiz_relationship'] = array(
      'description' => 'Table storing what questions belong to what quizzes aware of revision.',
      'fields'      => array(
          'qr_id'                 => array('type' => 'serial', 'size' => 'normal', 'unsigned' => TRUE, 'not null' => TRUE),
          'quiz_qid'              => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'quiz_vid'              => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'qr_pid'                => array('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => NULL, 'description' => 'ID of parent page (question node)'),
          'question_nid'          => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_vid'          => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_status'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1),
          'weight'                => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
          'max_score'             => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
          'auto_update_max_score' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('qr_id'),
      'unique keys' => array(
          'parent_child' => array('quiz_qid', 'quiz_vid', 'question_nid', 'question_vid'),
      ),
      'indexes'     => array(
          'parent_id' => array('quiz_vid'),
          'child_id'  => array('question_vid'),
      ),
  );

  /**
   * Quiz specific options concerning  availability and access to scores.
   */
  // Create the quiz entity results table
  $schema['quiz_results'] = array(
      'description' => 'Table storing the total results for a quiz',
      'fields'      => array(
          'result_id'    => array('type' => 'serial', 'size' => 'normal', 'unsigned' => TRUE, 'not null' => TRUE,),
          'quiz_qid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'ID of quiz node'),
          'quiz_vid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Version ID of quiz node'),
          'uid'          => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Author ID'),
          'time_start'   => array('type' => 'int', 'unsigned' => FALSE),
          'time_end'     => array('type' => 'int', 'unsigned' => FALSE),
          'released'     => array('type' => 'int', 'unsigned' => TRUE, 'default' => 0),
          'score'        => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
          'is_invalid'   => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'is_evaluated' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'time_left'    => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'layout'       => array('serialize' => TRUE, 'type' => 'text', 'description' => "Serialized layout data.", 'size' => 'medium',),
      ),
      'primary key' => array('result_id'),
      'indexes'     => array(
          'user_results' => array('uid', 'quiz_vid', 'quiz_qid'),
          'vid'          => array('quiz_vid'),
      ),
  );

  /**
   * Information about a particular question in a result
   */
  $schema['quiz_results_answers'] = array(
      'description' => 'Table storing information about the results for the questions',
      'fields'      => array(
          'result_answer_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The result answer ID',),
          'result_id'        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_nid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_vid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'tid'              => array('type' => 'int', 'unsigned' => TRUE),
          'is_correct'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
          'is_skipped'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'points_awarded'   => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0,),
          'answer_timestamp' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE,),
          'number'           => array('type' => 'int', 'size' => 'small', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 1,),
          'is_doubtful'      => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'tiny'),
      ),
      'primary key' => array('result_answer_id'),
      'unique keys' => array(
          'result_answer' => array('result_id', 'question_nid', 'question_vid'),
      ),
      'indexes'     => array(
          'result_id' => array('result_id'),
      ),
  );

  /**
   * Allows custom feedback based on the results of a user completing a quiz.
   */
  // Create the quiz node result options table
  $schema['quiz_result_options'] = array(
      'description' => 'Table storing result options for quizzes. Several result options may belong to a single quiz.',
      'fields'      => array(
          'option_id'             => array('type' => 'serial', 'size' => 'normal', 'unsigned' => TRUE, 'not null' => TRUE),
          'nid'                   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'ID of quiz node'),
          'vid'                   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Version ID of quiz node'),
          'option_name'           => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'option_summary'        => array('type' => 'text'),
          'option_summary_format' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'option_start'          => array('type' => 'int', 'unsigned' => TRUE, 'default' => 0),
          'option_end'            => array('type' => 'int', 'unsigned' => TRUE, 'default' => 0),
      ),
      'primary key' => array('option_id'),
      'indexes'     => array(
          'quiz_id' => array('vid', 'nid'),
      )
  );

  $schema['quiz_terms'] = array(
      'description' => 'Table storing what terms belongs to what quiz for categorized random quizzes',
      'fields'      => array(
          'nid'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Node id'),
          'vid'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Version id'),
          'weight'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The terms weight decides the order of the terms'),
          'tid'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Term id'),
          'max_score' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Max score for each question marked with this term'),
          'number'    => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Number of questions to be drawn from this term'),
      ),
      'primary key' => array('vid', 'tid'),
      'indexes'     => array(
          'version' => array('vid'),
      ),
  );

  // Connect all the quiz specific properties to the correct version of a quiz.
  // Create the quiz node properties table
  $schema['quiz_node_properties'] = array(
      'description' => 'The base table for quiz nodes',
      'fields'      => array(
          'qnp_id'                     => array('type' => 'serial'),
          'vid'                        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'nid'                        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'type'                       => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => '', 'description' => 'The {quiz_type}.type of this quiz.'),
          'uid'                        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
          'aid'                        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'number_of_random_questions' => array('type' => 'int', 'size' => 'small', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'max_score_for_random'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1),
          'pass_rate'                  => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE),
          'summary_pass'               => array('type' => 'text'),
          'summary_pass_format'        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'summary_default'            => array('type' => 'text'),
          'summary_default_format'     => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'randomization'              => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'backwards_navigation'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1),
          'keep_results'               => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => QUIZ_KEEP_ALL),
          'repeat_until_correct'       => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'quiz_open'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'quiz_close'                 => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'takes'                      => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'show_attempt_stats'         => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 1),
          'time_limit'                 => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'quiz_always'                => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
          'tid'                        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'has_userpoints'             => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'userpoints_tid'             => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'time_left'                  => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'max_score'                  => array('type' => 'int', 'not null' => TRUE, 'default' => 0,),
          'allow_skipping'             => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0),
          'allow_resume'               => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 1),
          'allow_jumping'              => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0),
          'allow_change'               => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 1),
          'show_passed'                => array('type' => 'int', 'size' => 'tiny', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 1),
          'mark_doubtful'              => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
          'review_options'             => array('type' => 'text', 'serialize' => TRUE),
      ),
      'primary key' => array('qnp_id'),
      'indexes'     => array('quiz_id' => array('vid', 'nid')),
  );

  return $schema;
}

/**
 * Implements hook_update_N()
 */
// should have been named quiz_update_7400
function quiz_update_7100(&$sandbox) {
  db_add_field('quiz_node_properties', 'show_passed', array('type' => 'int', 'not null' => TRUE, 'default' => 1, 'size' => 'tiny'));
  return t('Show passed field added to quiz config.');
}

// should have been named quiz_update_7401
function quiz_update_7101(&$sandbox) {
  db_add_field('quiz_user_settings', 'show_passed', array('type' => 'int', 'not null' => TRUE, 'default' => 1, 'size' => 'tiny'));
  return t('Done !');
}

/**
 * Implements hook_update_N
 */
function quiz_update_7402(&$sandbox) {
  if (!db_field_exists('quiz_node_properties', 'summary_pass_format')) {
    db_add_field('quiz_node_properties', 'summary_pass_format', array('type' => 'varchar', 'length' => 255));
    db_add_field('quiz_node_properties', 'summary_default_format', array('type' => 'varchar', 'length' => 255));
    db_add_field('quiz_result_options', 'option_summary_format', array('type' => 'varchar', 'length' => 255));
    db_add_field('quiz_user_settings', 'summary_pass_format', array('type' => 'varchar', 'length' => 255));
    db_add_field('quiz_user_settings', 'summary_default_format', array('type' => 'varchar', 'length' => 255));
  }
  return t("Added new format fields to the tables if they didn't already exist.");
}

/**
 * Adds index on vid column to the quiz_results table and on question_vid to
 * the quiz_relationship table.
 */
function quiz_update_7403() {
  db_add_index('quiz_results', 'vid', array('vid'));
  db_add_index('quiz_relationship', 'child_id', array('question_vid'));
}

/**
 * Increase the maximum quiz size
 */
function quiz_update_7404() {
  db_change_field('quiz_node_properties', 'number_of_random_questions', 'number_of_random_questions', array(
      'type'     => 'int',
      'size'     => 'small',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default'  => 0,
  ));
  db_change_field('quiz_results_answers', 'number', 'number', array(
      'type'     => 'int',
      'size'     => 'small',
      'unsigned' => FALSE,
      'not null' => TRUE,
      'default'  => 1,
  ));
  return t('Increased the maximum quiz size.');
}

/**
 * Remove unsigned attribute from field time_start and time_end in quiz_results table.
 */
function quiz_update_7405() {
  $spec = array(
      'type'     => 'int',
      'unsigned' => FALSE,
      'default'  => 0,
  );
  db_change_field('quiz_results', 'time_start', 'time_start', $spec);
  db_change_field('quiz_results', 'time_end', 'time_end', $spec);
  return t('Removed unsigned attribute from field time_start and time_end in quiz_results table');
}

/**
 * Adding columns mark answers as doubtful
 */
function quiz_update_7406(&$sandbox) {
  $spec = array(
      'type'     => 'int',
      'not null' => TRUE,
      'default'  => 0,
      'size'     => 'tiny'
  );
  db_add_field('quiz_results_answers', 'is_doubtful', $spec);
  db_add_field('quiz_node_properties', 'mark_doubtful', $spec);
  return t('Added new format fields to the tables');
}

/**
 * Adding auto update max score
 */
function quiz_update_7407(&$sandbox) {
  $spec = array(
      'type'     => 'int',
      'size'     => 'tiny',
      'not null' => TRUE,
      'default'  => 0,
  );
  db_add_field('quiz_relationship', 'auto_update_max_score', $spec);
  return t('Added new auto update max score field to the quiz_relationship table');
}

/**
 * Adding userpoints tid column
 */
function quiz_update_7409(&$sandbox) {
  $table = 'quiz_node_properties';
  $schema = drupal_get_schema_unprocessed('quiz', $table);
  foreach (array('userpoints_tid') as $field) {
    db_add_field($table, $field, $schema['fields'][$field]);
  }
  return t('Adding userpoints tid column to quiz_node_properties');
}

/**
 * Implements hook_uninstall().
 */
function quiz_uninstall() {
  db_delete('variable')
    ->condition('name', "quiz_%", 'like')
    ->execute();
}

/**
 * Add new layout field to the quiz_results table.
 */
function quiz_update_7500() {
  $spec = array(
      'serialize'   => TRUE,
      'type'        => 'text',
      'description' => "Serialized layout data.",
      'size'        => 'medium',
  );
  db_add_field('quiz_results', 'layout', $spec);
  return t('Added new layout field to the quiz_results table');
}

/**
 * Add new result_answer_id field to the quiz_results_answers table.
 */
function quiz_update_7501() {
  db_drop_primary_key('quiz_results_answers');
  db_add_unique_key('quiz_results_answers', 'result_answer', array('result_id', 'question_nid', 'question_vid'));
  $spec = array(
      'description' => 'The result answer ID.',
      'type'        => 'serial',
      'unsigned'    => TRUE,
      'not null'    => TRUE,
  );
  db_add_field('quiz_results_answers', 'result_answer_id', $spec, array('primary key' => array('result_answer_id')));
  return t('Added new result_answer_id field to the quiz_results_answers table.');
}

/**
 * Add new qr_id field to the quiz_relationship table.
 */
function quiz_update_7502() {
  db_drop_primary_key('quiz_relationship');
  db_add_unique_key('quiz_relationship', 'parent_child', array('quiz_qid', 'quiz_vid', 'question_nid', 'question_vid'));
  $spec = array(
      'type'     => 'serial',
      'size'     => 'normal',
      'unsigned' => TRUE,
      'not null' => TRUE,
  );
  db_add_field('quiz_relationship', 'qr_id', $spec, array('primary key' => array('qr_id')));
  return t('Added new qr_id field to the quiz_relationship table.');
}

/**
 * Add new qr_pid field to the quiz_relationship table.
 */
function quiz_update_7503() {
  $spec = array(
      'type'     => 'int',
      'size'     => 'normal',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default'  => NULL,
  );
  db_add_field('quiz_relationship', 'qr_pid', $spec);
  return t('Added new qr_pid field to the quiz_relationship table.');
}

/**
 * Allow time_start and time_end to be NULL. The time "0" is still a valid time.
 * This lets us do better filtering in Views (where NULL).
 */
function quiz_update_7504() {
  $spec = array(
      'type'     => 'int',
      'unsigned' => FALSE,
  );
  db_change_field('quiz_results', 'time_start', 'time_start', $spec);
  db_change_field('quiz_results', 'time_end', 'time_end', $spec);
  db_query("UPDATE {quiz_results} SET time_end = NULL WHERE time_end = 0");
  return t('Removed default attribute from field time_start and time_end in quiz_results table.');
}

/**
 * Revamping quiz feedback options.
 */
function quiz_update_7505() {
  db_add_field('quiz_node_properties', 'review_options', array(
      'type'      => 'text',
      'serialize' => TRUE,
  ));

  drupal_get_schema(NULL, TRUE);

  $sql = "SELECT * FROM {quiz_node_properties}";
  $result = db_query($sql);
  while ($row = $result->fetch()) {
    if ($row->feedback_time == 0) {
      $row->review_options['end']['answer_feedback'] = 'answer_feedback';
      if ($row->show_feedback) {
        $row->review_options['end']['solution'] = 'solution';
      }
    }
    if ($row->feedback_time == 1) {
      $row->review_options['question']['answer_feedback'] = 'answer_feedback';
      if ($row->show_feedback) {
        $row->review_options['question']['solution'] = 'solution';
      }
    }
    if ($row->feedback_time == 2) {
      $row->review_options = array();
    }
    drupal_write_record('quiz_node_properties', $row, array('nid', 'vid'));
  }

  db_drop_field('quiz_node_properties', 'feedback_time');
  db_drop_field('quiz_node_properties', 'display_feedback');
}

/**
 * Add qnp_id and uid so we can have better quiz node defaults.
 */
function quiz_update_7506() {
  db_drop_primary_key('quiz_node_properties');
  db_add_field('quiz_node_properties', 'qnp_id', array(
      'type' => 'serial',
    ), array('primary key' => array('qnp_id')));

  db_add_field('quiz_node_properties', 'uid', array(
      'type'     => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default'  => 0,
  ));

  // We could do this, but we should really migrate user settings from 4.x.
  // Patches welcome.
  // db_drop_table('quiz_user_settings');
}

/**
 * Add allow_change to restrict users from changing answers.
 */
function quiz_update_7507() {
  db_add_field('quiz_node_properties', 'allow_change', array(
      'type'     => 'int',
      'size'     => 'small',
      'not null' => TRUE,
      'default'  => 1,
  ));
}
